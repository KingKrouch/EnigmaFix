name: CMake

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      
    - name: Update System Packages.
      run: sudo apt update -y && sudo apt upgrade -y && sudo apt install software-properties-common && sudo add-apt-repository universe multiverse -y && sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y && sudo apt update -y && sudo apt upgrade -y
    
    - name: Install Dependencies.
      # Installs the Dependencies needed before compiling.
      run: sudo apt install git cmake ninja-build meson mingw-w64\* g++-13 gcc-13 build-essential libboost-all-dev libzydis-dev zydis-tools -y

    #- name: Build Boost (For MinGW).
      #id: boost
      #uses: egor-tensin/build-boost@v1
      #with:
          #version: 1.71.0
          #toolset: mingw
          #libraries: filesystem program_options system
          #platform: x64
          #configuration: Release
          # directory: /usr/x86_64-w64-mingw32/sys-root/mingw/include/

    #- name: Show Paths (For Boost).
      #run: |
          #printf 'Boost has been unpacked to: %s\n' '${{ steps.boost.outputs.root }}'
          #printf 'Libraries can be found here: %s\n' '${{ steps.boost.outputs.librarydir }}'
      #shell: bash
      
    - name: Initialize Submodules.
    # Grabs the source code for all of our submodules
      run: git submodule init && git submodule update
      
    - name: Set Permissions for Build scripts.
      # Self explanatory
      run: sudo chmod +x ./Build_Debug.sh && sudo chmod +x ./Build_Release.sh

    - name: Configure CMake project and compile.
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: ./Build_${{env.BUILD_TYPE}}.sh

    - name: Test
      working-directory: ${{github.workspace}}/Binaries/Windows
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}
      
